(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{370:function(t,e,a){"use strict";a.r(e);var r=a(40),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"教程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#教程"}},[t._v("#")]),t._v(" 教程")]),t._v(" "),a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("p",[t._v("我们在写一些常规后台页面的时候，避免不了是需要经常和表单打交道。所以可以想偷懒的小伙伴可能会考虑有没有办法不去做"),a("code",[t._v("表单工程师")]),t._v("?用代码解决重复的人肉工作，没错，我们可以通过 "),a("a",{attrs:{href:"https://json-schema.org/understanding-json-schema/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSON Schema"),a("OutboundLink")],1),t._v(" 来描述我们的表单信息，这比重复的写表单控件可方便多了。")]),t._v(" "),a("p",[t._v("但是 "),a("code",[t._v("JSON Schema")]),t._v(" 到表单的映射，则是需要我们去关注的，so... 业界有没有比较好的方案呢？答案是肯定的，比如以下几个表单渲染工具：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://x-render.gitee.io/form-render",target:"_blank",rel:"noopener noreferrer"}},[t._v("Form Render"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://formilyjs.org/#/bdCRC5/dzUZU8il",target:"_blank",rel:"noopener noreferrer"}},[t._v("Formliy"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("...")])]),t._v(" "),a("p",[a("code",[t._v("Formliy")]),t._v(" 是一款比较强大的表单渲染器，目前对 React 支持最友好，Vue 相关的有一个 "),a("a",{attrs:{href:"https://github.com/formly-js/vue-formly",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-formly"),a("OutboundLink")],1),t._v(" 但也仅仅是 Vue 2.x 的。还有就是 "),a("code",[t._v("Formliy")]),t._v(" 过于强大，不仅仅支持 JSON Schema 还支持 JSX Schema 渲染表单。而我们只是单纯需要像 "),a("a",{attrs:{href:"https://x-render.gitee.io/form-render",target:"_blank",rel:"noopener noreferrer"}},[t._v("Form Render"),a("OutboundLink")],1),t._v(" 这样的 JSON Schema 标准的轻量易用型框架。")]),t._v(" "),a("p",[t._v("所以 有了这个 基于 "),a("a",{attrs:{href:"https://github.com/muwoo/vue-form-render",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue 3.x 的 Form render"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"基于-form-render"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于-form-render"}},[t._v("#")]),t._v(" 基于 form-render")]),t._v(" "),a("p",[a("code",[t._v("vue3.x form render")]),t._v(" 是基于 "),a("code",[t._v("form render")]),t._v(" 的 "),a("code",[t._v("vue 3.x")]),t._v(" 版本的实现，所以可以有 "),a("code",[t._v("form render")]),t._v(" 的一切优势，比如极简API:")]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("FormRender")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(":schema")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("schema"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(":formData")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("formData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("@on-change")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("change"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("@on-validate")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("validate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),a("demo"),t._v(" "),a("h2",{attrs:{id:"规范协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#规范协议"}},[t._v("#")]),t._v(" 规范协议")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("schema")]),t._v(" 的设计上，我们也是依赖于国际标准的 "),a("code",[t._v("JSON Schema")]),t._v(" 规范，并在此基础上添加几条简单约定，满足表单 UI 更丰富表达：")]),t._v(" "),a("ul",[a("li",[t._v("JSON schema 是 "),a("code",[t._v("vue-form-render")]),t._v(" 的 schema 的一个子集，可以无缝接入")]),t._v(" "),a("li",[t._v("有别于 JSON schema 的扩展的字段，都用 ui: 开头")]),t._v(" "),a("li",[t._v("所有表单元素都有的 ui 属性各给一个独立字段，例如ui:disabled、ui:hidden")]),t._v(" "),a("li",[t._v("只有某些表单元素用的到的 ui 属性统一存放在 ui:options，详见"),a("a",{attrs:{href:""}},[t._v("uiSchema")]),t._v(" 配置")])]),t._v(" "),a("p",[t._v("随着form-render 表单设计器的接入，协议层对于用户已经可看做实现细节，通过表单设计器，大伙可以轻松搭建表单，生成对应 schema")])],1)}),[],!1,null,null,null);e.default=n.exports}}]);